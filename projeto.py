'''Os passos a serem inicialmente implementados s√£o:
 (1) desmembrar (parse) a entrada para obter o comando e seus par√¢metros
 (2) criar um objeto ProcessBuilder
 (3) iniciar o processo
 (4) obter o fluxo de sa√≠da
 (5) enviar o conte√∫do retornado pelo comando'''

import os
import subprocess

# Cria uma fun√ß√£o main onde:
def main():
    print("-"*50)
    print("ùîºùï©ùï°ùïùùï†ùï£ùïíùïïùï†ùï£ ùïïùïñ ùî∏ùï£ùï¢ùï¶ùïöùïßùï†ùï§")
    print("-"*50)

    # Diret√≥rio atual √© atribu√≠do para uma vari√°vel.
    diretorioAtual = os.getcwd()

    # Entra em uma estrutura de repeti√ß√£o que mostra o diret√≥rio e os itens dentro desse diret√≥rio, enumerando-os com um For (onde o i √© o contador, item √© o item dentro do diret√≥rio e o par√¢metro 
    # ENUMERATE cria um contador autom√°tico onde, a partir do n√∫mero 1, enumera itens de dentro da vari√°vel ItensDiret√≥rio.)
    while True:
        print("Voc√™ est√° nesse diret√≥rio: ", diretorioAtual)
        itensDiretorio = os.listdir(diretorioAtual)

        for i, item in enumerate(itensDiretorio, start= 1):
            print(i,".", item)

    # Aqui, ele cria uma vari√°vel para pegar o comando em caixa baixa do usu√°rio, para que ele possa realizar outros processos, como a navega√ß√£o e o subprocess.    
        comando = input("GIM>> ").lower()

    # Caso o comando for "Sair", ele acabar√° a repeti√ß√£o.    
        if comando == "sair":
            print("Saindo...")
            break
    
    # !!!!!!!!!!! Importante>>>>>> Aqui ele precisaria de uma condi√ß√£o para navegar no diret√≥rio atrav√©s da biblioteca OS. 
    # Tipo, se voc√™ rodar ele agora, ele s√≥ vai listar o diret√≥rio atual, que no meu caso √© a pasta do Visual Code. Ent√£o √© preciso manipula√ß√£o de diret√≥rio aqui!

    # Creio eu que o buffer poderia ser chamado ap√≥s essa estrutura de navega√ß√£o.
    

    # Aqui, ele pega a fun√ß√£o parse e exibe no terminal. S√≥ para mostrar que a lista foi feita.
        else:
            parse(comando)
            resultado = parse(comando)
            print(resultado)


# Essa fun√ß√£o retorna o comando em formato de lista: ["tipo", "assim"]
def parse(comando: str):
    comandoLista = comando.split()
    return comandoLista

# Essa fun√ß√£o puxa o comandoLista e realiza o Subprocess/ProcessBuilder, onde ele vai observar o primeiro item da lista como um comando e os pr√≥ximos itens do comandoLista como par√¢metros.
def execucaoComando(comandoLista):
    try:
        processo = subprocess.Popen(comandoLista, stdout=subprocess.PIPE,
                                stderr=subprocess.STDOUT, text=True)
    except FileNotFoundError:
        return "O comando n√£o foi encontrado."

    # O comando try vai tentar (av√°) criar um subprocesso (Subprocesso √© um processo do sistema) a partir dos seguintes argumentos: A lista de comandos, a sa√≠da (que recebe .PIPE = onde permite o redirecionamento de uma resposta 
    # para outra entrada, e stderr mescla mensagens de erro (como quando a gente testa e d√° o erro em vermelho), junto do stdout. Ou seja, todo comando, seja ele certo ou errado, vai pro mesmo lugar.)
    # Se o comando n√£o for encontrado, n√£o vai funcionar.


    # Aqui, ele l√™ a captura do processo que fizemos e atrav√©s do .communicate, espera o c√≥digo terminar. Por√©m, se o comando demorar mais de 10 segundos para rodar, ele faz .kill(), que 
    # interv√©m e "mata" o processo.

    try:
        out, _ = processo.communicate(timeout=10)

    except subprocess.TimeoutExpired:
        processo.kill()
        # aqui ele recebe a sa√≠da de out, esse _ ignora outra sa√≠da. 
        out, _ = processo.communicate()
        out = out + "Processo n√£o finalizado no tempo."
    
    return out


main()
